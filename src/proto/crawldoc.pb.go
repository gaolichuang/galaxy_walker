// Code generated by protoc-gen-go.
// source: crawldoc.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	crawldoc.proto

It has these top-level messages:
	ConnectionInfo
	OutLink
	FetchHint
	CrawlRecord
	CrawlParam
	CrawlChain
	CrawlDoc
	CrawlDocs
	CrawlRequest
	CrawlResponse
*/
package proto

import proto1 "galaxy_walker/internal/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "galaxy_walker/internal/golang.org/x/net/context"
	grpc "galaxy_walker/internal/google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type ReturnType int32

const (
	ReturnType_UNKNOWN ReturnType = 0
	//    NODNS                   = 1;
	ReturnType_NOCONNECTION ReturnType = 2
	//    FORBIDDENROBOTS         = 3;
	ReturnType_TIMEOUT   ReturnType = 4
	ReturnType_BADTYPE   ReturnType = 5
	ReturnType_TOOBIG    ReturnType = 6
	ReturnType_BADHEADER ReturnType = 7
	//    NETWORKERROR            = 8;
	ReturnType_SITEQUEUEFULLFETCHER ReturnType = 9
	// url format is not avaliable  crawl/base/utils.IsInvalidUrl()
	ReturnType_INVALIDURL         ReturnType = 10
	ReturnType_INVALIDREDIRECTURL ReturnType = 11
	//    META_REDIRECT           = 12;
	//    JS_REDIRECT             = 13;
	//    IP_BLACKLISTED          = 14;
	//    BADCONTENT              = 15;
	//    URL_BLACKLISTED         = 16;
	ReturnType_SITEQUEUEFULLDISPATCHER ReturnType = 17
	ReturnType_STATUS100               ReturnType = 100
	ReturnType_STATUS101               ReturnType = 101
	ReturnType_STATUS200               ReturnType = 200
	ReturnType_STATUS201               ReturnType = 201
	ReturnType_STATUS202               ReturnType = 202
	ReturnType_STATUS203               ReturnType = 203
	ReturnType_STATUS204               ReturnType = 204
	ReturnType_STATUS205               ReturnType = 205
	ReturnType_STATUS206               ReturnType = 206
	ReturnType_STATUS300               ReturnType = 300
	ReturnType_STATUS301               ReturnType = 301
	ReturnType_STATUS302               ReturnType = 302
	ReturnType_STATUS303               ReturnType = 303
	ReturnType_STATUS304               ReturnType = 304
	ReturnType_STATUS305               ReturnType = 305
	ReturnType_STATUS306               ReturnType = 306
	ReturnType_STATUS307               ReturnType = 307
	ReturnType_STATUS400               ReturnType = 400
	ReturnType_STATUS401               ReturnType = 401
	ReturnType_STATUS402               ReturnType = 402
	ReturnType_STATUS403               ReturnType = 403
	ReturnType_STATUS404               ReturnType = 404
	ReturnType_STATUS405               ReturnType = 405
	ReturnType_STATUS406               ReturnType = 406
	ReturnType_STATUS407               ReturnType = 407
	ReturnType_STATUS408               ReturnType = 408
	ReturnType_STATUS409               ReturnType = 409
	ReturnType_STATUS410               ReturnType = 410
	ReturnType_STATUS411               ReturnType = 411
	ReturnType_STATUS412               ReturnType = 412
	ReturnType_STATUS413               ReturnType = 413
	ReturnType_STATUS414               ReturnType = 414
	ReturnType_STATUS415               ReturnType = 415
	ReturnType_STATUS416               ReturnType = 416
	ReturnType_STATUS417               ReturnType = 417
	ReturnType_STATUS500               ReturnType = 500
	ReturnType_STATUS501               ReturnType = 501
	ReturnType_STATUS502               ReturnType = 502
	ReturnType_STATUS503               ReturnType = 503
	ReturnType_STATUS504               ReturnType = 504
	ReturnType_STATUS505               ReturnType = 505
	ReturnType_STATUS509               ReturnType = 509
	ReturnType_STATUS510               ReturnType = 510
)

var ReturnType_name = map[int32]string{
	0:   "UNKNOWN",
	2:   "NOCONNECTION",
	4:   "TIMEOUT",
	5:   "BADTYPE",
	6:   "TOOBIG",
	7:   "BADHEADER",
	9:   "SITEQUEUEFULLFETCHER",
	10:  "INVALIDURL",
	11:  "INVALIDREDIRECTURL",
	17:  "SITEQUEUEFULLDISPATCHER",
	100: "STATUS100",
	101: "STATUS101",
	200: "STATUS200",
	201: "STATUS201",
	202: "STATUS202",
	203: "STATUS203",
	204: "STATUS204",
	205: "STATUS205",
	206: "STATUS206",
	300: "STATUS300",
	301: "STATUS301",
	302: "STATUS302",
	303: "STATUS303",
	304: "STATUS304",
	305: "STATUS305",
	306: "STATUS306",
	307: "STATUS307",
	400: "STATUS400",
	401: "STATUS401",
	402: "STATUS402",
	403: "STATUS403",
	404: "STATUS404",
	405: "STATUS405",
	406: "STATUS406",
	407: "STATUS407",
	408: "STATUS408",
	409: "STATUS409",
	410: "STATUS410",
	411: "STATUS411",
	412: "STATUS412",
	413: "STATUS413",
	414: "STATUS414",
	415: "STATUS415",
	416: "STATUS416",
	417: "STATUS417",
	500: "STATUS500",
	501: "STATUS501",
	502: "STATUS502",
	503: "STATUS503",
	504: "STATUS504",
	505: "STATUS505",
	509: "STATUS509",
	510: "STATUS510",
}
var ReturnType_value = map[string]int32{
	"UNKNOWN":                 0,
	"NOCONNECTION":            2,
	"TIMEOUT":                 4,
	"BADTYPE":                 5,
	"TOOBIG":                  6,
	"BADHEADER":               7,
	"SITEQUEUEFULLFETCHER":    9,
	"INVALIDURL":              10,
	"INVALIDREDIRECTURL":      11,
	"SITEQUEUEFULLDISPATCHER": 17,
	"STATUS100":               100,
	"STATUS101":               101,
	"STATUS200":               200,
	"STATUS201":               201,
	"STATUS202":               202,
	"STATUS203":               203,
	"STATUS204":               204,
	"STATUS205":               205,
	"STATUS206":               206,
	"STATUS300":               300,
	"STATUS301":               301,
	"STATUS302":               302,
	"STATUS303":               303,
	"STATUS304":               304,
	"STATUS305":               305,
	"STATUS306":               306,
	"STATUS307":               307,
	"STATUS400":               400,
	"STATUS401":               401,
	"STATUS402":               402,
	"STATUS403":               403,
	"STATUS404":               404,
	"STATUS405":               405,
	"STATUS406":               406,
	"STATUS407":               407,
	"STATUS408":               408,
	"STATUS409":               409,
	"STATUS410":               410,
	"STATUS411":               411,
	"STATUS412":               412,
	"STATUS413":               413,
	"STATUS414":               414,
	"STATUS415":               415,
	"STATUS416":               416,
	"STATUS417":               417,
	"STATUS500":               500,
	"STATUS501":               501,
	"STATUS502":               502,
	"STATUS503":               503,
	"STATUS504":               504,
	"STATUS505":               505,
	"STATUS509":               509,
	"STATUS510":               510,
}

func (x ReturnType) String() string {
	return proto1.EnumName(ReturnType_name, int32(x))
}
func (ReturnType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// tag for source. you can custom
// like primary_tag and second_tag
type RequestType int32

const (
	RequestType_TESTING        RequestType = 0
	RequestType_WEB_StartUp    RequestType = 1
	RequestType_WEB_MAIN       RequestType = 2
	RequestType_WEB_HUB        RequestType = 3
	RequestType_WEB_CONTENT    RequestType = 4
	RequestType_WEB_SUBCONTENT RequestType = 5
	RequestType_WEB_DETAIL     RequestType = 6
)

var RequestType_name = map[int32]string{
	0: "TESTING",
	1: "WEB_StartUp",
	2: "WEB_MAIN",
	3: "WEB_HUB",
	4: "WEB_CONTENT",
	5: "WEB_SUBCONTENT",
	6: "WEB_DETAIL",
}
var RequestType_value = map[string]int32{
	"TESTING":        0,
	"WEB_StartUp":    1,
	"WEB_MAIN":       2,
	"WEB_HUB":        3,
	"WEB_CONTENT":    4,
	"WEB_SUBCONTENT": 5,
	"WEB_DETAIL":     6,
}

func (x RequestType) String() string {
	return proto1.EnumName(RequestType_name, int32(x))
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Priority int32

const (
	Priority_NORMAL Priority = 0
	Priority_URGENT Priority = 1
)

var Priority_name = map[int32]string{
	0: "NORMAL",
	1: "URGENT",
}
var Priority_value = map[string]int32{
	"NORMAL": 0,
	"URGENT": 1,
}

func (x Priority) String() string {
	return proto1.EnumName(Priority_name, int32(x))
}
func (Priority) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ConnectionInfo struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *ConnectionInfo) Reset()                    { *m = ConnectionInfo{} }
func (m *ConnectionInfo) String() string            { return proto1.CompactTextString(m) }
func (*ConnectionInfo) ProtoMessage()               {}
func (*ConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OutLink struct {
	Url  string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *OutLink) Reset()                    { *m = OutLink{} }
func (m *OutLink) String() string            { return proto1.CompactTextString(m) }
func (*OutLink) ProtoMessage()               {}
func (*OutLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FetchHint struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *FetchHint) Reset()                    { *m = FetchHint{} }
func (m *FetchHint) String() string            { return proto1.CompactTextString(m) }
func (*FetchHint) ProtoMessage()               {}
func (*FetchHint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CrawlRecord struct {
	RequestTime int64           `protobuf:"varint,1,opt,name=request_time" json:"request_time,omitempty"`
	Fetcher     *ConnectionInfo `protobuf:"bytes,2,opt,name=fetcher" json:"fetcher,omitempty"`
	// time the doc fetched
	FetchTime    int64  `protobuf:"varint,3,opt,name=fetch_time" json:"fetch_time,omitempty"`
	FetchUseInms int64  `protobuf:"varint,4,opt,name=fetch_use_inms" json:"fetch_use_inms,omitempty"`
	ParentDocid  string `protobuf:"bytes,10,opt,name=parent_docid" json:"parent_docid,omitempty"`
}

func (m *CrawlRecord) Reset()                    { *m = CrawlRecord{} }
func (m *CrawlRecord) String() string            { return proto1.CompactTextString(m) }
func (*CrawlRecord) ProtoMessage()               {}
func (*CrawlRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CrawlRecord) GetFetcher() *ConnectionInfo {
	if m != nil {
		return m.Fetcher
	}
	return nil
}

type CrawlParam struct {
	Pri            Priority          `protobuf:"varint,1,opt,name=pri,enum=proto.Priority" json:"pri,omitempty"`
	Hostload       int32             `protobuf:"varint,2,opt,name=hostload" json:"hostload,omitempty"`
	RandomHostload int32             `protobuf:"varint,3,opt,name=random_hostload" json:"random_hostload,omitempty"`
	FetcherCount   int32             `protobuf:"varint,4,opt,name=fetcher_count" json:"fetcher_count,omitempty"`
	DropContent    bool              `protobuf:"varint,5,opt,name=drop_content" json:"drop_content,omitempty"`
	Nofollow       bool              `protobuf:"varint,6,opt,name=nofollow" json:"nofollow,omitempty"`
	FakeHost       string            `protobuf:"bytes,10,opt,name=fake_host" json:"fake_host,omitempty"`
	FetchHint      *FetchHint        `protobuf:"bytes,11,opt,name=fetch_hint" json:"fetch_hint,omitempty"`
	Receivers      []*ConnectionInfo `protobuf:"bytes,12,rep,name=receivers" json:"receivers,omitempty"`
	Referer        string            `protobuf:"bytes,20,opt,name=referer" json:"referer,omitempty"`
	CustomUa       bool              `protobuf:"varint,21,opt,name=custom_ua" json:"custom_ua,omitempty"`
	UseProxy       bool              `protobuf:"varint,22,opt,name=use_proxy" json:"use_proxy,omitempty"`
	FollowRedirect bool              `protobuf:"varint,23,opt,name=follow_redirect" json:"follow_redirect,omitempty"`
	Taskid         string            `protobuf:"bytes,100,opt,name=taskid" json:"taskid,omitempty"`
	Rtype          RequestType       `protobuf:"varint,101,opt,name=rtype,enum=proto.RequestType" json:"rtype,omitempty"`
	PrimaryTag     string            `protobuf:"bytes,102,opt,name=primary_tag" json:"primary_tag,omitempty"`
	SecondaryTag   []string          `protobuf:"bytes,103,rep,name=secondary_tag" json:"secondary_tag,omitempty"`
}

func (m *CrawlParam) Reset()                    { *m = CrawlParam{} }
func (m *CrawlParam) String() string            { return proto1.CompactTextString(m) }
func (*CrawlParam) ProtoMessage()               {}
func (*CrawlParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CrawlParam) GetFetchHint() *FetchHint {
	if m != nil {
		return m.FetchHint
	}
	return nil
}

func (m *CrawlParam) GetReceivers() []*ConnectionInfo {
	if m != nil {
		return m.Receivers
	}
	return nil
}

// for follow redirect.
type CrawlChain struct {
	// TODO.
	Docid      uint32 `protobuf:"varint,1,opt,name=docid" json:"docid,omitempty"`
	RequestUrl string `protobuf:"bytes,2,opt,name=request_url" json:"request_url,omitempty"`
	// url use to crawl. it's generated base on request url
	Url string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	// fill at fetcher, http response information
	RedirectUrl string     `protobuf:"bytes,4,opt,name=redirect_url" json:"redirect_url,omitempty"`
	Code        ReturnType `protobuf:"varint,5,opt,name=code,enum=proto.ReturnType" json:"code,omitempty"`
	// record error.Errors.
	ErrorInfo     string `protobuf:"bytes,6,opt,name=error_info" json:"error_info,omitempty"`
	Content       string `protobuf:"bytes,7,opt,name=content" json:"content,omitempty"`
	ContentLength int64  `protobuf:"varint,8,opt,name=content_length" json:"content_length,omitempty"`
	// response header.
	Header string `protobuf:"bytes,10,opt,name=header" json:"header,omitempty"`
}

func (m *CrawlChain) Reset()                    { *m = CrawlChain{} }
func (m *CrawlChain) String() string            { return proto1.CompactTextString(m) }
func (*CrawlChain) ProtoMessage()               {}
func (*CrawlChain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type CrawlDoc struct {
	Docid      uint32 `protobuf:"varint,1,opt,name=docid" json:"docid,omitempty"`
	RequestUrl string `protobuf:"bytes,2,opt,name=request_url" json:"request_url,omitempty"`
	// url use to crawl. it's generated base on request url
	Url string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	// fill at fetcher, http response information
	RedirectUrl string     `protobuf:"bytes,4,opt,name=redirect_url" json:"redirect_url,omitempty"`
	Code        ReturnType `protobuf:"varint,5,opt,name=code,enum=proto.ReturnType" json:"code,omitempty"`
	// record error.Errors.
	ErrorInfo     string `protobuf:"bytes,6,opt,name=error_info" json:"error_info,omitempty"`
	Content       string `protobuf:"bytes,7,opt,name=content" json:"content,omitempty"`
	ContentLength int64  `protobuf:"varint,8,opt,name=content_length" json:"content_length,omitempty"`
	// compress at storage handler.
	ContentCompressed bool `protobuf:"varint,9,opt,name=content_compressed" json:"content_compressed,omitempty"`
	// response header.
	Header     string `protobuf:"bytes,10,opt,name=header" json:"header,omitempty"`
	LastModify string `protobuf:"bytes,11,opt,name=last_modify" json:"last_modify,omitempty"`
	// content type of the page, eg text/html
	ContentType       string     `protobuf:"bytes,12,opt,name=content_type" json:"content_type,omitempty"`
	IndomainOutlinks  []*OutLink `protobuf:"bytes,30,rep,name=indomain_outlinks" json:"indomain_outlinks,omitempty"`
	OutdomainOutlinks []*OutLink `protobuf:"bytes,31,rep,name=outdomain_outlinks" json:"outdomain_outlinks,omitempty"`
	// content hash(128 bit)
	// int64 chash_0   =   32;
	// int64 chash_1   =   33;
	// original encoding which is deteched by the page content
	OrigEncoding string `protobuf:"bytes,34,opt,name=orig_encoding" json:"orig_encoding,omitempty"`
	// encoding after convert to utf8
	// the same with orig_encoding if convert fail
	// utf8 if convert success
	ConvEncoding  string        `protobuf:"bytes,35,opt,name=conv_encoding" json:"conv_encoding,omitempty"`
	Reservation   string        `protobuf:"bytes,40,opt,name=reservation" json:"reservation,omitempty"`
	CrawlParam    *CrawlParam   `protobuf:"bytes,50,opt,name=crawl_param" json:"crawl_param,omitempty"`
	CrawlRecord   *CrawlRecord  `protobuf:"bytes,60,opt,name=crawl_record" json:"crawl_record,omitempty"`
	RedirectChain []*CrawlChain `protobuf:"bytes,70,rep,name=redirectChain" json:"redirectChain,omitempty"`
}

func (m *CrawlDoc) Reset()                    { *m = CrawlDoc{} }
func (m *CrawlDoc) String() string            { return proto1.CompactTextString(m) }
func (*CrawlDoc) ProtoMessage()               {}
func (*CrawlDoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CrawlDoc) GetIndomainOutlinks() []*OutLink {
	if m != nil {
		return m.IndomainOutlinks
	}
	return nil
}

func (m *CrawlDoc) GetOutdomainOutlinks() []*OutLink {
	if m != nil {
		return m.OutdomainOutlinks
	}
	return nil
}

func (m *CrawlDoc) GetCrawlParam() *CrawlParam {
	if m != nil {
		return m.CrawlParam
	}
	return nil
}

func (m *CrawlDoc) GetCrawlRecord() *CrawlRecord {
	if m != nil {
		return m.CrawlRecord
	}
	return nil
}

func (m *CrawlDoc) GetRedirectChain() []*CrawlChain {
	if m != nil {
		return m.RedirectChain
	}
	return nil
}

type CrawlDocs struct {
	Docs []*CrawlDoc `protobuf:"bytes,1,rep,name=docs" json:"docs,omitempty"`
}

func (m *CrawlDocs) Reset()                    { *m = CrawlDocs{} }
func (m *CrawlDocs) String() string            { return proto1.CompactTextString(m) }
func (*CrawlDocs) ProtoMessage()               {}
func (*CrawlDocs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CrawlDocs) GetDocs() []*CrawlDoc {
	if m != nil {
		return m.Docs
	}
	return nil
}

type CrawlRequest struct {
	Request string `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *CrawlRequest) Reset()                    { *m = CrawlRequest{} }
func (m *CrawlRequest) String() string            { return proto1.CompactTextString(m) }
func (*CrawlRequest) ProtoMessage()               {}
func (*CrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type CrawlResponse struct {
	Ok  bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Ret int64 `protobuf:"varint,2,opt,name=ret" json:"ret,omitempty"`
}

func (m *CrawlResponse) Reset()                    { *m = CrawlResponse{} }
func (m *CrawlResponse) String() string            { return proto1.CompactTextString(m) }
func (*CrawlResponse) ProtoMessage()               {}
func (*CrawlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto1.RegisterType((*ConnectionInfo)(nil), "proto.ConnectionInfo")
	proto1.RegisterType((*OutLink)(nil), "proto.OutLink")
	proto1.RegisterType((*FetchHint)(nil), "proto.FetchHint")
	proto1.RegisterType((*CrawlRecord)(nil), "proto.CrawlRecord")
	proto1.RegisterType((*CrawlParam)(nil), "proto.CrawlParam")
	proto1.RegisterType((*CrawlChain)(nil), "proto.CrawlChain")
	proto1.RegisterType((*CrawlDoc)(nil), "proto.CrawlDoc")
	proto1.RegisterType((*CrawlDocs)(nil), "proto.CrawlDocs")
	proto1.RegisterType((*CrawlRequest)(nil), "proto.CrawlRequest")
	proto1.RegisterType((*CrawlResponse)(nil), "proto.CrawlResponse")
	proto1.RegisterEnum("proto.ReturnType", ReturnType_name, ReturnType_value)
	proto1.RegisterEnum("proto.RequestType", RequestType_name, RequestType_value)
	proto1.RegisterEnum("proto.Priority", Priority_name, Priority_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for CrawlService service

type CrawlServiceClient interface {
	Feed(ctx context.Context, in *CrawlDocs, opts ...grpc.CallOption) (*CrawlResponse, error)
	IsHealthy(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type crawlServiceClient struct {
	cc *grpc.ClientConn
}

func NewCrawlServiceClient(cc *grpc.ClientConn) CrawlServiceClient {
	return &crawlServiceClient{cc}
}

func (c *crawlServiceClient) Feed(ctx context.Context, in *CrawlDocs, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/proto.CrawlService/Feed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) IsHealthy(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/proto.CrawlService/IsHealthy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CrawlService service

type CrawlServiceServer interface {
	Feed(context.Context, *CrawlDocs) (*CrawlResponse, error)
	IsHealthy(context.Context, *CrawlRequest) (*CrawlResponse, error)
}

func RegisterCrawlServiceServer(s *grpc.Server, srv CrawlServiceServer) {
	s.RegisterService(&_CrawlService_serviceDesc, srv)
}

func _CrawlService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CrawlDocs)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlServiceServer).Feed(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CrawlService_IsHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlServiceServer).IsHealthy(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CrawlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CrawlService",
	HandlerType: (*CrawlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _CrawlService_Feed_Handler,
		},
		{
			MethodName: "IsHealthy",
			Handler:    _CrawlService_IsHealthy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 1492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x56, 0xdb, 0x72, 0x1b, 0x45,
	0x13, 0x8e, 0xad, 0x83, 0xa5, 0x91, 0x2c, 0x8f, 0xe7, 0x77, 0x92, 0xad, 0xfc, 0xf5, 0xff, 0x09,
	0x0a, 0x14, 0xae, 0x54, 0x11, 0x2c, 0xc9, 0x87, 0xa4, 0x80, 0x0b, 0x59, 0x5e, 0xc7, 0x2a, 0x64,
	0xc9, 0xac, 0x25, 0x52, 0x5c, 0xa9, 0x16, 0xed, 0xc8, 0xde, 0xb2, 0xb4, 0x2b, 0x66, 0x57, 0x49,
	0x0c, 0x2f, 0xc1, 0x21, 0x10, 0xce, 0x87, 0x7b, 0xce, 0xbc, 0x04, 0xe1, 0xf4, 0x0c, 0xbc, 0x00,
	0x77, 0x1c, 0x2f, 0xa0, 0xe8, 0xe9, 0x9d, 0x95, 0x35, 0x29, 0xfc, 0x04, 0x5c, 0x69, 0xbf, 0xaf,
	0xbb, 0x67, 0xba, 0x7b, 0xfa, 0x9b, 0x11, 0x29, 0xf4, 0x84, 0x7d, 0x7b, 0xe0, 0xf8, 0xbd, 0xab,
	0x23, 0xe1, 0x87, 0x3e, 0x4b, 0xe1, 0x4f, 0xf1, 0x1a, 0x29, 0xd4, 0x7c, 0xcf, 0xe3, 0xbd, 0xd0,
	0xf5, 0xbd, 0xba, 0xd7, 0xf7, 0x19, 0x23, 0xc9, 0x43, 0x3f, 0x08, 0x8d, 0x99, 0x4b, 0x33, 0xcb,
	0x59, 0x0b, 0xbf, 0x25, 0x37, 0xf2, 0x45, 0x68, 0xcc, 0x02, 0x97, 0xb2, 0xf0, 0xbb, 0xf8, 0x38,
	0x99, 0x6b, 0x8d, 0xc3, 0x86, 0xeb, 0x1d, 0x31, 0x4a, 0x12, 0x63, 0x31, 0x50, 0x11, 0xf2, 0x53,
	0x06, 0x84, 0xfc, 0x4e, 0x14, 0x00, 0x8b, 0xc8, 0xef, 0x62, 0x85, 0x64, 0xb7, 0x79, 0xd8, 0x3b,
	0xdc, 0x71, 0xbd, 0xf0, 0xd4, 0x5d, 0xec, 0xf0, 0x30, 0x0e, 0x92, 0xdf, 0xc5, 0xfb, 0x33, 0x24,
	0x57, 0x93, 0x99, 0x5b, 0xbc, 0xe7, 0x0b, 0x87, 0x3d, 0x44, 0xf2, 0x82, 0xbf, 0x30, 0xe6, 0x41,
	0xd8, 0x0d, 0xdd, 0x21, 0xc7, 0xf8, 0x84, 0x95, 0x53, 0x5c, 0x1b, 0x28, 0x06, 0x89, 0xf5, 0xe5,
	0x3e, 0x5c, 0xe0, 0x4a, 0xb9, 0xf2, 0xd9, 0xa8, 0xe4, 0xab, 0x7a, 0xa1, 0x56, 0xec, 0xc5, 0xfe,
	0x47, 0x08, 0x7e, 0x46, 0x2b, 0x26, 0x70, 0xc5, 0x2c, 0x32, 0xb8, 0xde, 0xc3, 0xa4, 0x10, 0x99,
	0xc7, 0x01, 0xef, 0xba, 0xde, 0x30, 0x30, 0x92, 0xe8, 0x92, 0x47, 0xb6, 0x13, 0xf0, 0x3a, 0x70,
	0x32, 0xb1, 0x91, 0x2d, 0xb8, 0x17, 0x76, 0xa1, 0xc7, 0xae, 0x63, 0x10, 0x2c, 0x22, 0x17, 0x71,
	0x5b, 0x92, 0x2a, 0xfe, 0x98, 0x24, 0x04, 0x6b, 0xd9, 0xb3, 0x85, 0x3d, 0x84, 0x88, 0xc4, 0x48,
	0xb8, 0x58, 0x41, 0xa1, 0xbc, 0xa0, 0x72, 0xdc, 0x13, 0xae, 0x2f, 0xdc, 0xf0, 0xd8, 0x92, 0x36,
	0x76, 0x81, 0x64, 0x64, 0x67, 0x06, 0xbe, 0xed, 0xa8, 0xde, 0x4f, 0x30, 0x7b, 0x94, 0x2c, 0x08,
	0xdb, 0x73, 0xfc, 0x61, 0x77, 0xe2, 0x92, 0x40, 0x97, 0x42, 0x44, 0xef, 0xc4, 0x8e, 0x97, 0xc9,
	0xbc, 0xaa, 0xb4, 0xdb, 0xf3, 0xc7, 0x5e, 0x88, 0xe9, 0xa7, 0x54, 0xfa, 0x5c, 0xd4, 0x24, 0x27,
	0xd3, 0x77, 0x84, 0x3f, 0x02, 0x0f, 0x2f, 0x84, 0x84, 0x8d, 0x14, 0xf8, 0x64, 0xac, 0x9c, 0xe4,
	0x6a, 0x11, 0x25, 0x93, 0xf1, 0xfc, 0xbe, 0x3f, 0x18, 0xf8, 0xb7, 0x8d, 0x34, 0x9a, 0x27, 0x98,
	0xfd, 0x97, 0x64, 0xfb, 0xf6, 0x11, 0xc7, 0x54, 0x54, 0xe9, 0x19, 0x49, 0xc8, 0x24, 0xe0, 0x40,
	0x54, 0x7f, 0x0f, 0xe1, 0xe4, 0x8d, 0x1c, 0x9e, 0x09, 0x55, 0xf5, 0x4e, 0x26, 0x42, 0x75, 0x1c,
	0x87, 0x03, 0x26, 0x45, 0xf0, 0x1e, 0x77, 0x6f, 0x71, 0x11, 0x18, 0xf9, 0x4b, 0x89, 0xd3, 0xcf,
	0xf0, 0xc4, 0x8f, 0x19, 0x64, 0x4e, 0xf0, 0x3e, 0x17, 0x70, 0xec, 0x4b, 0x98, 0x40, 0x0c, 0x65,
	0x72, 0xbd, 0x71, 0x10, 0x42, 0xa7, 0xc6, 0xb6, 0x71, 0x36, 0xca, 0x3c, 0x22, 0x3a, 0xb6, 0x34,
	0xca, 0x73, 0x85, 0xd5, 0xef, 0x1c, 0x1b, 0xe7, 0x22, 0x23, 0x10, 0x7b, 0x12, 0xcb, 0x1e, 0x47,
	0x05, 0x76, 0x05, 0x77, 0x5c, 0xd8, 0x2b, 0x34, 0xce, 0xa3, 0x4b, 0x21, 0xa2, 0x2d, 0xc5, 0xb2,
	0x73, 0x24, 0x1d, 0xda, 0xc1, 0x11, 0x9c, 0xbb, 0x83, 0x7b, 0x2b, 0xc4, 0x96, 0x49, 0x4a, 0x84,
	0xc7, 0x23, 0x6e, 0x70, 0x3c, 0x65, 0xa6, 0xaa, 0xb0, 0xd4, 0xb8, 0x82, 0xc5, 0x8a, 0x1c, 0xd8,
	0x45, 0x92, 0x83, 0x13, 0x1f, 0xda, 0xe2, 0xb8, 0x1b, 0xda, 0x07, 0x46, 0x1f, 0x97, 0x21, 0x8a,
	0x6a, 0xdb, 0x07, 0xf2, 0x18, 0x03, 0xd0, 0x80, 0xe7, 0xc4, 0x2e, 0x07, 0xd0, 0x98, 0xac, 0x95,
	0x9f, 0x90, 0xe0, 0x54, 0xbc, 0x37, 0xab, 0x46, 0xac, 0x76, 0x68, 0xbb, 0x1e, 0x5b, 0x22, 0xa9,
	0x68, 0x1a, 0xe5, 0x90, 0xcd, 0x5b, 0x11, 0x90, 0x5b, 0xc5, 0x1a, 0x92, 0xb2, 0x8d, 0xe4, 0x46,
	0x14, 0xd5, 0x01, 0xf5, 0x2a, 0x3d, 0x27, 0x4e, 0xf4, 0x8c, 0xb2, 0x8b, 0x6a, 0xc5, 0x98, 0x64,
	0x34, 0xdd, 0x31, 0x27, 0x83, 0x1e, 0x21, 0xc9, 0x9e, 0xef, 0x70, 0x9c, 0x9c, 0x42, 0x79, 0x71,
	0x52, 0x69, 0x38, 0x16, 0x1e, 0x16, 0x8a, 0x66, 0x29, 0x36, 0x2e, 0x84, 0x2f, 0x40, 0x49, 0x7d,
	0x1f, 0xe7, 0x28, 0x6b, 0x65, 0x91, 0xc1, 0xdb, 0x07, 0x4e, 0x31, 0x1e, 0xc1, 0xb9, 0xe8, 0x14,
	0x15, 0x84, 0xf5, 0x0b, 0xea, 0xb3, 0x3b, 0xe0, 0xde, 0x01, 0xdc, 0x13, 0x19, 0x94, 0xe1, 0xbc,
	0x62, 0x1b, 0x48, 0xca, 0x93, 0x38, 0xe4, 0xb6, 0x03, 0x53, 0x10, 0x8d, 0xa1, 0x42, 0xc5, 0xbb,
	0x69, 0x92, 0xc1, 0xce, 0x80, 0x16, 0xff, 0x8d, 0x7d, 0x79, 0x8c, 0xb0, 0xd8, 0xad, 0xe7, 0x0f,
	0x47, 0x82, 0x07, 0x01, 0x77, 0x8c, 0x2c, 0x4e, 0xf3, 0xa2, 0xb2, 0xd4, 0x26, 0x86, 0xd3, 0xda,
	0x28, 0x7b, 0x34, 0xb0, 0xa1, 0x41, 0x43, 0xdf, 0x71, 0xfb, 0xc7, 0x28, 0x66, 0xe8, 0x91, 0xa4,
	0x76, 0x91, 0x91, 0x1d, 0x89, 0xf7, 0xc1, 0xc1, 0xcf, 0x47, 0x1d, 0x51, 0x9c, 0x2c, 0x98, 0x3d,
	0x41, 0x16, 0x5d, 0x79, 0x43, 0xc1, 0x84, 0x76, 0xfd, 0x71, 0x38, 0x80, 0x27, 0x24, 0x30, 0xfe,
	0x8f, 0x32, 0x2f, 0xa8, 0xf6, 0xa8, 0x97, 0xc5, 0xa2, 0xb1, 0x63, 0x4b, 0xf9, 0xb1, 0xa7, 0x08,
	0x83, 0x98, 0x07, 0xa3, 0x2f, 0xfe, 0x63, 0xf4, 0xe2, 0xc4, 0x73, 0x12, 0x0e, 0x2a, 0x82, 0xfb,
	0xf5, 0xa0, 0xcb, 0x3d, 0xe8, 0xba, 0xeb, 0x1d, 0x18, 0x45, 0xcc, 0x2f, 0x2f, 0x49, 0x53, 0x71,
	0xd2, 0x09, 0xf2, 0xbd, 0x75, 0xe2, 0x74, 0x39, 0x72, 0x92, 0xe4, 0xc4, 0xe9, 0x92, 0x9c, 0x96,
	0x80, 0x8b, 0x5b, 0xb6, 0xbc, 0x8d, 0x8c, 0xe5, 0xf8, 0xe4, 0x27, 0x14, 0x2b, 0x93, 0x1c, 0x3e,
	0xba, 0xdd, 0x91, 0xbc, 0xef, 0x8d, 0x32, 0x5e, 0x7c, 0xf1, 0x00, 0x9c, 0x3c, 0x04, 0x16, 0xe9,
	0x9d, 0x3c, 0x0a, 0x6b, 0xd0, 0x3e, 0x8c, 0x11, 0xf8, 0xde, 0x19, 0x4f, 0x62, 0x10, 0x9b, 0x0e,
	0x8a, 0x5e, 0x42, 0x2b, 0x5a, 0x5b, 0x3d, 0x8b, 0x1b, 0x64, 0x3e, 0x9e, 0x39, 0x54, 0xbe, 0xb1,
	0x8d, 0x0d, 0xd1, 0x36, 0x43, 0x83, 0xa5, 0xfb, 0x15, 0x57, 0x48, 0x36, 0x56, 0x85, 0x6c, 0x4e,
	0x12, 0x94, 0x10, 0x80, 0x2a, 0x64, 0xf0, 0xc2, 0x74, 0x30, 0xd8, 0x2d, 0x34, 0x16, 0x97, 0x49,
	0x5e, 0xa5, 0x81, 0xba, 0x88, 0xee, 0x5d, 0xfc, 0x54, 0x8f, 0x79, 0x0c, 0x8b, 0x25, 0x32, 0xaf,
	0x3c, 0x83, 0x91, 0xef, 0x05, 0x9c, 0x15, 0xc8, 0xac, 0x7f, 0x84, 0x5e, 0x19, 0x0b, 0xbe, 0xa4,
	0x9e, 0x04, 0x8f, 0xfe, 0x24, 0x24, 0x2c, 0xf9, 0x79, 0xe5, 0xa7, 0x34, 0x21, 0x27, 0xd2, 0x60,
	0x39, 0x32, 0xd7, 0x69, 0x3e, 0xdd, 0x6c, 0xdd, 0x6c, 0xd2, 0x33, 0xe0, 0x9d, 0x6f, 0xb6, 0x6a,
	0xad, 0x66, 0xd3, 0xac, 0xb5, 0xeb, 0xad, 0x26, 0x9d, 0x95, 0xe6, 0x76, 0x7d, 0xd7, 0x6c, 0x75,
	0xda, 0x34, 0x29, 0xc1, 0x66, 0x75, 0xab, 0xfd, 0xdc, 0x9e, 0x49, 0x53, 0x8c, 0x90, 0x74, 0xbb,
	0xd5, 0xda, 0xac, 0xdf, 0xa0, 0x69, 0x36, 0x4f, 0xb2, 0x60, 0xd8, 0x31, 0xab, 0x5b, 0xa6, 0x45,
	0xe7, 0x20, 0xdf, 0xa5, 0xfd, 0x7a, 0xdb, 0x7c, 0xa6, 0x63, 0x76, 0xcc, 0xed, 0x4e, 0xa3, 0xb1,
	0x6d, 0xb6, 0x6b, 0x3b, 0x60, 0xc9, 0x42, 0x7a, 0xa4, 0xde, 0x7c, 0xb6, 0xda, 0xa8, 0x6f, 0x75,
	0xac, 0x06, 0x25, 0xa0, 0x01, 0xa6, 0xb0, 0x65, 0x6e, 0xd5, 0x2d, 0xd8, 0x56, 0xf2, 0x39, 0x78,
	0x32, 0xce, 0x6b, 0x2b, 0x6c, 0xd5, 0xf7, 0xf7, 0xaa, 0xd1, 0x22, 0x8b, 0x72, 0xb7, 0xfd, 0x76,
	0xb5, 0xdd, 0xd9, 0x2f, 0xad, 0xac, 0x50, 0x67, 0x1a, 0x96, 0xa8, 0xec, 0x80, 0x82, 0x65, 0xb0,
	0x7e, 0x3d, 0x33, 0x8d, 0x4b, 0xf4, 0xbe, 0x86, 0xcb, 0xf4, 0x1b, 0x0d, 0x57, 0xe8, 0xb7, 0x1a,
	0x5e, 0xa5, 0xdf, 0x69, 0x78, 0x8d, 0x7e, 0xaf, 0xe1, 0x75, 0xfa, 0xc3, 0x14, 0xae, 0xc0, 0x7e,
	0x1f, 0xcf, 0x4e, 0xe3, 0x12, 0xfd, 0x44, 0xc3, 0x65, 0xfa, 0xa9, 0x86, 0x2b, 0xf4, 0x33, 0x0d,
	0xaf, 0xd2, 0xcf, 0x35, 0xbc, 0x46, 0xbf, 0xd0, 0xf0, 0x3a, 0xfd, 0x52, 0xc3, 0x1b, 0xf4, 0xab,
	0x29, 0xbc, 0x0a, 0xfb, 0xbf, 0x9c, 0x98, 0xc6, 0x25, 0xfa, 0x8a, 0x86, 0xcb, 0xf4, 0x55, 0x0d,
	0x57, 0xe8, 0x6b, 0x1a, 0x5e, 0xa5, 0x77, 0x35, 0xbc, 0x46, 0x5f, 0xd7, 0xf0, 0x3a, 0x7d, 0x43,
	0xc3, 0x1b, 0xf4, 0x9e, 0x86, 0xaf, 0xd1, 0x37, 0x35, 0x7c, 0x9d, 0xbe, 0x35, 0x8d, 0x4b, 0x2b,
	0xf4, 0x6d, 0x0d, 0x97, 0xe8, 0x3b, 0x1a, 0x2e, 0xd3, 0x77, 0x35, 0x5c, 0xa1, 0xef, 0x69, 0x78,
	0x95, 0xbe, 0xaf, 0xe1, 0x35, 0xfa, 0x81, 0x86, 0xd7, 0xe9, 0x87, 0x1a, 0xde, 0xa0, 0x1f, 0x4d,
	0xe1, 0x35, 0xe8, 0xcf, 0xcf, 0x1a, 0x2e, 0xd1, 0x5f, 0x34, 0x5c, 0xa6, 0xbf, 0x6a, 0xb8, 0x42,
	0x7f, 0xd3, 0xf0, 0x2a, 0xfd, 0x5d, 0xc3, 0x6b, 0xf4, 0x0f, 0x0d, 0x5f, 0xa7, 0x7f, 0x4e, 0x63,
	0xa8, 0xf7, 0xaf, 0xc4, 0x95, 0x97, 0x48, 0x6e, 0xea, 0xbf, 0x08, 0x0a, 0xca, 0xdc, 0x6f, 0xd7,
	0x9b, 0x37, 0x40, 0x6f, 0x0b, 0x24, 0x77, 0xd3, 0xdc, 0xec, 0xee, 0x87, 0xb6, 0x08, 0x3b, 0x23,
	0x3a, 0xc3, 0xf2, 0x24, 0x23, 0x89, 0xdd, 0x6a, 0x5d, 0x89, 0x4f, 0xa2, 0x9d, 0xce, 0x26, 0x4d,
	0xc4, 0xbe, 0xa0, 0xce, 0xb6, 0xd9, 0x94, 0x6a, 0x64, 0xa4, 0x80, 0xc1, 0x9d, 0xcd, 0x98, 0x4b,
	0x49, 0x7d, 0x49, 0x6e, 0xcb, 0x6c, 0x57, 0xeb, 0x0d, 0x9a, 0xbe, 0x52, 0x24, 0x99, 0xf8, 0xef,
	0xae, 0x14, 0x6c, 0xb3, 0x65, 0xed, 0x56, 0x1b, 0xb0, 0x31, 0x7c, 0x77, 0xac, 0x1b, 0x32, 0x66,
	0xa6, 0xfc, 0xa2, 0xba, 0x6d, 0xf6, 0xe1, 0x56, 0x75, 0x7b, 0x9c, 0xad, 0x90, 0xe4, 0x36, 0x87,
	0xf7, 0x89, 0x3e, 0x70, 0x39, 0x05, 0x17, 0x96, 0xf4, 0x3b, 0x32, 0xba, 0x72, 0x8a, 0x67, 0xd8,
	0x35, 0x92, 0xad, 0x07, 0x3b, 0xdc, 0x1e, 0x84, 0x87, 0xc7, 0xec, 0x3f, 0xba, 0x13, 0x56, 0x7e,
	0x5a, 0xe4, 0xf3, 0x69, 0xa4, 0x2b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xed, 0x35, 0xec, 0x51,
	0x3b, 0x0d, 0x00, 0x00,
}
